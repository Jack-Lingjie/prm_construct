我有一个bsf树按照如下代码构建的，最终生成树的所有节点在 all_nodes中，帮我对这个树进行构建，统计每个子节点的叶节点总数以及叶节点中pred_acc是true的数量，如果子节点的所有叶节点有一个是ture, self.label_he设为1，否则设为0，self.label_se 设为正确的叶子节点数量/总的叶节点数量
我有一个bsf树按照如下代码构建的，最终生成树的所有节点在 all_nodes中，帮我对这个树进行构建，帮我统计从根节点开始到每个叶节点的路径上step>0的self.label_he和self.label_se，分别以list格式进行存储，
我有一个bsf树按照如下代码构建的，最终生成树的所有节点在 all_nodes中，其中的process_tree对这个树进行构建，统计每个子节点的叶节点总数以及叶节点中pred_acc是true的数量，如果子节点的所有叶节点有一个是ture, self.label_he设为1，否则设为0，self.label_se 设为正确的叶子节点数量/总的叶节点数量，帮我基于代码进行修改，对于叶子节点，如果pred_acc为true，则self.label_he和self.label_se为1，否则为0
import re

DELIMITER = "."
TARGET = "the answer is"

def extract_answer(text):  
    # Pattern to match different formats of "The answer is: C"  
    pattern = r"answer is[:\s]*\(?(?P<answer>[A-J])\)?"  
    match = re.search(pattern, text, re.IGNORECASE)  
    if match:  
        return match.group("answer")  
    else:  
        print("1st answer extract failed\n" + text)  
        return extract_again(text)  
  
def extract_again(text):  
    # Pattern to match formats like "Answer: C"  
    pattern = r'.*[aA]nswer[:\s]*([A-J])'  
    match = re.search(pattern, text)  
    if match:  
        return match.group(1)  
    else:  
        return extract_final(text)  

def extract_final(text):
    pattern = r"\b[A-J]\b(?!.*\b[A-J]\b)"
    match = re.search(pattern, text, re.DOTALL)
    if match:
        return match.group(0)
    else:
        return None
    
class Node:
    def __init__(self, qid, idx, x, y, step, parent=None, next_nodes=None, gt_answer=None):
        self.qid = qid
        self.idx = idx
        self.x = x
        self.y = y
        self.step = step
        self.parent = parent
        self.next_nodes = next_nodes if next_nodes is not None else [] 
        self.gt_answer = gt_answer
        self.pred_acc = self.get_acc()
        self.is_leaf = False
        self.is_right = False
        self.label_he = 0
        self.label_se = 0
        self.he_list = []  
        self.se_list = [] 
        # self.depth = self.get_depth(y)

    def get_info(self):
        return {
            'qid': self.qid,
            'idx': self.idx,
            'x': self.x,
            'y': self.y,
            'step': self.step,
            'parent': self.parent,
            'next_nodes': self.next_nodes,
            'pred_acc': self.pred_acc,
            "label_he": self.label_he,
            "label_se": self.label_se,
            "gt_answer": self.gt_answer,
            "pred_acc": self.pred_acc,
            "pred": self.pred,
            "he_list": self.he_list,  
            "se_list": self.se_list
        }
    
    def get_acc(self):
        pred = extract_answer(self.y)
        self.pred = pred
        # print(f"pred: {pred}")
        # print(f"self.pred: {self.pred}")
        # print(f"self.gt_answer: {self.gt_answer}")
        if pred == self.gt_answer:
            return True
        else:
            return False
        
    def get_is_leaf(self):
        return False
    
    def get_is_right(self, delimiter="step"):
        step_pattern = re.compile(re.escape(delimiter), re.IGNORECASE)  
        matches = list(step_pattern.finditer(self.y))  
        if len(matches) == self.step and self.step > 0:  
            return True
        return False

def get_samples(task, model, input_prompts, previous_step, n_generate_sample):
    print(f"input_prompts length: {len(input_prompts)}")
    input_prompts = [x for x in input_prompts for _ in range(n_generate_sample)]
    previous_step_copy = [x for x in previous_step for _ in range(n_generate_sample)]
    print(f"input_prompts_copy length: {len(input_prompts)}")
    print(f"input_prompts: {input_prompts}")

    samples, original_output = model.get_next_response(input_prompts) # get results
    # print(f"sample: {samples}")
    new_ys = []
    for y_pre, y_new in zip(previous_step_copy, samples):
        new_ys.append(y_pre + y_new)
    print(f"len new_ys: {len(new_ys)}")
    print(f"new_ys: {new_ys}")
    # print(f"new_ys: {new_ys}")
    # print(f"original_output: {original_output}")
    return new_ys


def extract_content_before_ith_delimiter(delimiter, input_string, i): 
    input_string_lower = input_string.lower()
    target_pos = input_string_lower.find(TARGET)
    if target_pos == -1:
        return ""
    input_string = input_string[:target_pos]

    # 使用正则表达式查找所有匹配的位置  
    step_pattern = re.compile(re.escape(delimiter), re.IGNORECASE)  
    matches = list(step_pattern.finditer(input_string))  
    if len(matches) > i:  
        # 找到第 i + 1 个 Step 的位置，并返回其之前的内容  
        return input_string[:matches[i].start()] 
    elif len(matches) <= 1:  
        # 如果没有找到第 i 个 Step，返回空
        return ""
    # else:
        # return ""  
    
def get_split_prompt(task, nodes, x, step):
    """get split prompt
    """
    # ys = [node.y for node in nodes]
    delimiter = task.DELIMITER
    input_prompts = []
    node_has_sons = []
    node_completed = []
    previous_step = []
    for node in nodes:
        y = node.y
        prompt_extrcted = extract_content_before_ith_delimiter(delimiter, y, step)
        if prompt_extrcted or y == "":
            # TODO: add prompt warp
            print(f"prompt_extrcted: {prompt_extrcted}")
            previous_step.append(prompt_extrcted)
            prompt_extrcted = task.prompt_concat(x, prompt_extrcted)
            input_prompts.append(prompt_extrcted)
            node_has_sons.append(node)
        else:  
            node_completed.append(node)
    return input_prompts, previous_step, node_has_sons, node_completed

def get_filter_results(nodes, node_has_son, node_completed, new_ys, max_samples, n_generate_sample, step, idx, gt_answer):
    new_nodes = []
    for i, node in enumerate(node_has_son):
        if len(new_nodes) >= max_samples:
            break
        # new_nodes.append(node)
        for j in range(n_generate_sample):
            idx += 1
            temp_node = Node(qid=node.qid, idx=idx, x=node.x, y=new_ys[i * n_generate_sample + j], step=step, parent=node.idx, gt_answer=gt_answer)
            node.next_nodes.append(idx)
            new_nodes.append(temp_node)
    # new_nodes += node_completed
    # if len(nodes) == 1:
    #     # 排除根节点
    #     new_nodes = [node for node in new_nodes if node.idx != 0]
    select_new_ys = [node.y for node in new_nodes]

    return new_nodes, select_new_ys, idx    
    # select_new_ys = ys + new_ys
    # if len(select_new_ys) > max_samples:
    #     select_new_ys = select_new_ys[:max_samples]
    # return select_new_ys
def count_leaves_and_true_leaves(node, all_nodes):  
    if not node.next_nodes:  
        # 当前节点是叶节点  
        return 1, 1 if node.pred_acc else 0  
  
    total_leaves = 0  
    true_leaves = 0  
    for next_node_idx in node.next_nodes:  
        next_node = all_nodes[next_node_idx]  
        leaves, true_leaves_count = count_leaves_and_true_leaves(next_node, all_nodes)  
        total_leaves += leaves  
        true_leaves += true_leaves_count  
  
    # 设置当前节点的 label_he 和 label_se  
    node.label_he = 1 if true_leaves > 0 else 0  
    node.label_se = true_leaves / total_leaves if total_leaves > 0 else 0  
  
    return total_leaves, true_leaves  
  
  
def process_tree(all_nodes):  
    root = all_nodes[0]  
    count_leaves_and_true_leaves(root, all_nodes)

def dfs_collect_stats(node, all_nodes, he_path, se_path):  
    if node.step > 0:  
        he_path.append(node.label_he)  
        se_path.append(node.label_se)  
      
    if not node.next_nodes:  # 如果是叶节点  
        node.he_list = he_path.copy()  # 将路径上的 he_list 存储在叶节点中  
        node.se_list = se_path.copy()  # 将路径上的 se_list 存储在叶节点中  
        return  
      
    for next_node_idx in node.next_nodes:  
        next_node = all_nodes[next_node_idx]  
        dfs_collect_stats(next_node, all_nodes, he_path.copy(), se_path.copy())  
  
def collect_stats_from_root(all_nodes):  
    root = all_nodes[0]  # 假设根节点是第一个节点  
    dfs_collect_stats(root, all_nodes, [], [])  

def bsf_solve(args, task, qid, model, to_print=True):
    # model = task.model
    idx = 0 
    cnt = 0
    input_data = task.get_input(qid)  # input
    gt_answer = input_data["answer"]
    # x = task.cot_prompt_wrap(input_data)
    # x = model.get_input_wrap(x)
    x = task.cot_prompt_wrap(input_data, model, k=0)
    ys = [""]  # current output candidates
    infos = []
    node_x = Node(qid=qid, idx=idx, x=x, y="", step=0, parent=-1)
    nodes = [node_x]
    all_nodes = [node_x]
    for step in range(task.steps):
        # TODO: add nodes meta information
        print(f"node numbers: {len(nodes)}")
        node_idxs = [node.idx for node in nodes]
        print(f"node idxs: {str(node_idxs)}")
        input_prompts, previous_step, node_has_son, node_completed = get_split_prompt(task, nodes, x, step)
        cnt += len(node_completed)
        node_has_son_y = [node.y for node in node_has_son]
        node_has_son_idx = [node.idx for node in node_has_son]
        node_completed_y = [node.y for node in node_completed]
        node_completed_idx = [node.idx for node in node_completed]
        print(f"node_has_son_idx: {str(node_has_son_idx)}")
        print(f"node_has_son_y: {node_has_son_y}")
        print(f"node_completed_idx: {str(node_completed_idx)}")
        print(f"node_completed_y: {node_completed_y}")
        print(f"node_has_son: {len(node_has_son)}")
        print(f"node_completed: {len(node_completed)}")
        # get sample y
        # NOTE y need to append to the input x
        new_ys = get_samples(task, model, input_prompts, previous_step, args.n_generate_sample)
        # get new results
        new_nodes, select_new_ys, idx = get_filter_results(nodes, node_has_son, node_completed, new_ys, args.max_samples, args.n_generate_sample, step + 1, idx, gt_answer)
        
        ys = select_new_ys
        nodes = new_nodes
        all_nodes += nodes # parent nodes
        if cnt >= args.max_samples:
            break
        if (len(ys) >= args.max_samples):
            break
    
    import time
    start_time = time.time()  
    process_tree(all_nodes)
    end_time = time.time()  
  
    # 计算运行时间  
    execution_time = end_time - start_time  

    collect_stats_from_root(all_nodes)
    print(f"process_tree 函数的运行时间: {execution_time} 秒") 

    infos = [node.get_info() for node in all_nodes]
    return ys, {'tree_path': infos}
